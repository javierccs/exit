<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.nirima.jenkins.plugins.docker.DockerJobProperty plugin="docker-plugin@0.16.0">
      <tagOnCompletion>false</tagOnCompletion>
      <additionalTag></additionalTag>
      <pushOnSuccess>false</pushOnSuccess>
      <cleanImages>true</cleanImages>
    </com.nirima.jenkins.plugins.docker.DockerJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>PROJECT_NAME</name>
          <description></description>
          <defaultValue>myname</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GITLAB_URL</name>
          <description></description>
          <defaultValue>http://islingip01.scisb.isban.corp/AT-DevOps/spring-petclinic</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_BRANCH</name>
          <description></description>
          <defaultValue>master</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MAIL_LIST</name>
          <description></description>
          <defaultValue>fdelamor@isban.es</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.42">
      <scriptText>import jenkins.model.*

// Input parameters
def _PROJECT_NAME_ = &quot;${PROJECT_NAME}&quot;.trim()
def _GITLAB_URL_ = &quot;${GITLAB_URL}&quot;.trim()
def _MAIL_LIST_ = &quot;${MAIL_LIST}&quot;.trim()
def _BRANCH_ = &quot;${GIT_BRANCH}&quot;.trim()

def _PROJECT_TYPE_ = &quot;wordpress&quot;
def inst = Jenkins.getInstance()
def gitlab = inst.getDescriptor(&quot;com.dabsquared.gitlabjenkins.GitLabPushTrigger&quot;)
def _GITLAB_SERVER_ = gitlab.getGitlabHostUrl()
def _GITLAB_API_TOKEN_ = gitlab.getGitlabApiToken()
def _GITLAB_PROJECT_ = _GITLAB_URL_.minus(_GITLAB_SERVER_+&apos;/&apos;)
def JOB_NAME = &quot;wp-${_PROJECT_NAME_.replace(&quot; &quot;,&quot;_&quot;)}-master&quot;

def credentialsId
def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
  com.cloudbees.plugins.credentials.common.StandardUsernameCredentials.class,
  inst,
  null,
  null
);
for (c in creds) {
  if (c.description.equals(&apos;GreenLight Jenkins access&apos;)) {
     credentialsId = c.id
    }
  }

job (JOB_NAME) {
	println &quot;JOB: ${JOB_NAME}&quot;
    label(_PROJECT_TYPE_)

	logRotator(daysToKeep=30, numToKeep=10, artifactDaysToKeep=-1,artifactNumToKeep=-1)
                
		// Gives permission for the special authenticated group to see the workspace of the job
/*	authorization {
		permission(&apos;hudson.model.Item.Build&apos;, &quot;${BUILD_USER_ID}&quot;)
		permission(&apos;hudson.model.Item.Cancel&apos;, &quot;${BUILD_USER_ID}&quot;)
        permission(&apos;hudson.model.Item.Delete&apos;, &quot;${BUILD_USER_ID}&quot;)
		permission(&apos;hudson.model.Item.Discover&apos;, &quot;${BUILD_USER_ID}&quot;)
		permission(&apos;hudson.model.Item.Read&apos;, &quot;${BUILD_USER_ID}&quot;)
		permission(&apos;hudson.model.Item.Workspace&apos;, &quot;${BUILD_USER_ID}&quot;)
		permission(&apos;hudson.model.Run.Update&apos;, &quot;${BUILD_USER_ID}&quot;)
		//permission(&apos;hudson.plugins.release.ReleaseWrapper.Release&apos;, &quot;${BUILD_USER_ID}&quot;)	  
	} //authorization */

    parameters {
		// Defines a simple text parameter, where users can enter a string value.
		stringParam(&apos;gitlabActionType&apos;, &apos;PUSH&apos;, null)
  		stringParam(&apos;gitlabSourceRepoURL&apos;, _GITLAB_URL_+&apos;.git&apos;, null)
  		stringParam(&apos;gitlabSourceRepoName&apos;, &apos;origin&apos;, null)
  		stringParam(&apos;gitlabSourceBranch&apos;, _BRANCH_, null)
  		stringParam(&apos;gitlabTargetBranch&apos;, _BRANCH_, null)
    }
  
	scm {
		git {
				// Specify the branches to examine for changes and to build.
			branch(&apos;${gitlabSourceRepoName}/${gitlabSourceBranch}&apos;)
				// Adds a repository browser for browsing the details of changes in an external system.
			browser {
				gitLab(_GITLAB_URL_, &apos;7.9&apos;)
			} //browser
				// Adds a remote.
			remote {
					// Sets credentials for authentication with the remote repository.
				credentials(credentialsId)
					// Sets a name for the remote.
				name(&apos;origin&apos;)
					// Sets the remote URL.
				url(_GITLAB_URL_+&apos;.git&apos;)
			} //remote
          
          	remote {
					// Sets credentials for authentication with the remote repository.
				credentials(credentialsId)
					// Sets a name for the remote.
				name(&apos;${gitlabSourceRepoName}&apos;)
					// Sets the remote URL.
				url(&apos;${gitlabSourceRepoURL}&apos;)
			} //remote
          
            wipeOutWorkspace(true)
            mergeOptions(&apos;origin&apos;, &apos;${gitlabTargetBranch}&apos;)
		} //git
	} //scm

	triggers {
        gitlabPush {
            buildOnPushEvents(true)
            setBuildDescription(true)
            useCiFeatures(false)
            allowAllBranches(false)
            includeBranches(_BRANCH_)
        }
	} //triggers
  
    steps {
      shell(&apos;#echo off\n\nexport HOST_CHECKING=\&quot; -o StrictHostKeyChecking=no\&quot;\nexport FILE_DOCKER_COMPOSE=\&quot;docker-compose.yml\&quot;\n&apos;+
            &apos;export DOCKER_FILE=\&quot;DockerFile\&quot;\n\nexport HOST_REGISTRY_BASE_IP=registry.lvtc.gsnet.corp\nexport REGISTRY_BASE_LOGIN=registry.lvtc.gsnet.corp/\n&apos;+
            &apos;export REGISTRY_BASE_URL=https://registry.lvtc.gsnet.corp\n\nexport DATE=`date +%Y-%m-%d:%H:%M:%S`\n\n#Need Parameters\n# JOB_NAME\n\n# JOB_INSTANCE\n\n&apos;+
            &apos;export TAG_GIT=0.$BUILD_TAG-$DATE-SNAPSHOT;\n\n\n# IMAGE MUST BE THE NAME OF GITLAB PROJECT\nREMOTE_REPO=\&quot;$(git remote -v|tail -n1)\&quot;\n&apos;+
            &apos;# GITLAB project\nIMAGE_NAME=$(echo $REMOTE_REPO| sed \&quot;s|.git .*||\&quot; |sed \&quot;s|.*/||\&quot;)\n# Group GITLAB\n&apos;+
            &apos;GROUP_GITLAB=$(echo $REMOTE_REPO|sed \&quot;s|.git .*||\&quot; | sed \&quot;s|$IMAGE_NAME||\&quot; | sed \&quot;s|/$||\&quot; | sed \&quot;s|.*/||\&quot;)\n\n&apos;+
            &apos;IMAGE_NAME_BASE=\&quot;$(grep -HR \&quot;image:\&quot; $FILE_DOCKER_COMPOSE | cut -f3 -d\&apos;:\&apos;| head -n1)\&quot;;\n&apos;+
            &apos;IMAGE_NAME_BASE=\&quot;${IMAGE_NAME_BASE#\&quot;${IMAGE_NAME_BASE%%[![:space:]]*}\&quot;}\&quot;;   # elimina los espacios por delante\n&apos;+
            &apos;IMAGE_NAME_BASE=\&quot;${IMAGE_NAME_BASE%\&quot;${IMAGE_NAME_BASE##*[![:space:]]}\&quot;}\&quot;;  # elimina los espacios por detr\u00e1s\n\n&apos;+
            &apos;if [ \&quot;$IMAGE_NAME\&quot; == \&quot;\&quot; ]; then\n\necho \&quot;[ERROR] Name Docker Image doesn\u00b4t exist\&quot;\n\nexit 1;\nfi;\n\n&apos;+
            &apos;echo \&quot;BASE IMAGE NAME:\&quot;$IMAGE_NAME_BASE\n\nIMAGE_VERSION=\&quot;$(grep -HR \&quot;image:\&quot; $FILE_DOCKER_COMPOSE | cut -f4 -d\&apos;:\&apos;| head -n1)\&quot;;\n&apos;+
            &apos;IMAGE_VERSION=\&quot;${IMAGE_VERSION#\&quot;${IMAGE_VERSION%%[![:space:]]*}\&quot;}\&quot;;   # elimina los espacios por delante\n&apos;+
            &apos;IMAGE_VERSION=\&quot;${IMAGE_VERSION%\&quot;${IMAGE_VERSION##*[![:space:]]}\&quot;}\&quot;;  # elimina los espacios por detr\u00e1s\n\n\n&apos;+
            &apos;if [ \&quot;$IMAGE_VERSION\&quot; == \&quot;\&quot; ]; then\n\n#echo \&quot;[ERROR] Version docker image doesn\u00b4t exist\&quot;\n\n#exit 1;\n\n&apos;+
            &apos;IMAGE_VERSION=\&quot;latest\&quot;;\n\nfi;\n\necho \&quot;version_imagen:\&quot;$IMAGE_VERSION\n# moviendo ficheros del workspace al temporal\n\n&apos;+
            &apos;if [-a \&quot;$DOCKER_FILE\&quot;] # Review if void\nthen\necho \&quot;Docker file alerady exist\&quot;;\nexport WORDPRESS_DOCKERFILE=\&quot;$(cat $DOCKER_FILE)\&quot;\n&apos;+
            &apos;else\nexport WORDPRESS_DOCKERFILE=\&quot;FROM $IMAGE_NAME_BASE:$IMAGE_VERSION \\n COPY ./wp-content /var/www/html/wp-content\&quot;\nfi\n\n&apos;+
            &apos;echo \&quot;DOCKER_FILE:\&quot;$WORDPRESS_DOCKERFILE\necho -e $WORDPRESS_DOCKERFILE &gt;; Dockerfile\n\n\n\nexport REPOSITORY=$GROUP_GITLAB/$IMAGE_NAME\n&apos;+
            &apos;echo \&quot;REPOSITORY=\&quot;$REPOSITORY &gt;; env.properties\necho \&quot;TAG_GIT=\&quot;$TAG_GIT &gt;;&gt;; env.properties\necho \&quot;REPOSITORY:\&quot;$REPOSITORY\necho \&quot;TAG_GIT:\&quot;$TAG_GIT&apos;)
      environmentVariables {
	    propertiesFile(&apos;env.properties&apos;)
	  }
      dockerBuildAndPublish {
            repositoryName(_GITLAB_PROJECT_)
            tag(&apos;${BUILD_TIMESTAMP}-${GIT_REVISION,length=7}&apos;)
            registryCredentials(&apos;docker-hub&apos;)
            forcePull(false)
            createFingerprints(false)
            skipDecorate()
        }
      shell(&apos;git tag -t $TAG_GIT\ngit push --follow-tags&apos;)
      
    }

} //job


def url = new URL(_GITLAB_SERVER_+&quot;/api/v3/projects/&quot;+java.net.URLEncoder.encode(_GITLAB_PROJECT_)+&quot;/hooks?&quot;+
                  &quot;private_token=&quot;+_GITLAB_API_TOKEN_+
                  &quot;&amp;url=&quot;+inst.getRootUrl()+&quot;project/&quot;+JOB_NAME+
                  &quot;&amp;merge_requests_events=true&amp;push_events=true&quot;)
println &quot;Create hook: &quot;+url
/*def connection = url.openConnection()
connection.setRequestMethod(&quot;POST&quot;)
connection.doOutput = true
connection.connect()
	
println connection.content.text
assert connection.responseCode == 201*/</scriptText>
      <usingScriptText>true</usingScriptText>
      <ignoreExisting>false</ignoreExisting>
      <removedJobAction>IGNORE</removedJobAction>
      <removedViewAction>IGNORE</removedViewAction>
      <lookupStrategy>JENKINS_ROOT</lookupStrategy>
      <additionalClasspath></additionalClasspath>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>