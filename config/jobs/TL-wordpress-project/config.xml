<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GITLAB_PROJECT</name>
          <description>GitLab Project (p.ej groupname/reponame)</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_BRANCH</name>
          <description>Continuous Integration branch</description>
          <defaultValue>development</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>OSE3_PROJECT_NAME</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <com.cloudbees.plugins.credentials.CredentialsParameterDefinition plugin="credentials@1.24">
          <name>SERENITY_CREDENTIAL</name>
          <description>GreenLight LDAP username/password</description>
          <defaultValue></defaultValue>
          <credentialType>com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl</credentialType>
          <required>true</required>
        </com.cloudbees.plugins.credentials.CredentialsParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>master</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.42">
      <scriptText>import jenkins.model.*
  
// Input parameters
def GITLAB_PROJECT = &quot;${GITLAB_PROJECT}&quot;.trim()
def GIT_BRANCH = &quot;${GIT_BRANCH}&quot;.trim()
def OSE3_PROJECT_NAME = &quot;${OSE3_PROJECT_NAME}&quot;.trim()
def SERENITY_CREDENTIAL = &quot;${SERENITY_CREDENTIAL}&quot;

// Static values
def inst = Jenkins.getInstance()
def gitlab = inst.getDescriptor(&quot;com.dabsquared.gitlabjenkins.GitLabPushTrigger&quot;)
def GITLAB_SERVER = gitlab.getGitlabHostUrl()
def GITLAB_API_TOKEN = gitlab.getGitlabApiToken()
def JOB_NAME = &apos;wp-&apos;+GITLAB_PROJECT.replace(&apos;/&apos;,&apos;.&apos;)
def PROJECT_NAME = GITLAB_PROJECT.substring(GITLAB_PROJECT.indexOf('/')+1)

// Build job
job (JOB_NAME+&apos;-build&apos;) {
	println &quot;JOB: ${JOB_NAME}-build&quot;
    label(&apos;docker&apos;)
    deliveryPipelineConfiguration(&apos;CI&apos;, &apos;Build Image&apos;)

    logRotator(daysToKeep=30, numToKeep=10, artifactDaysToKeep=-1,artifactNumToKeep=-1)
                
    parameters {
		// Defines a simple text parameter, where users can enter a string value.
		stringParam(&apos;gitlabActionType&apos;, &apos;PUSH&apos;, null)
  		stringParam(&apos;gitlabSourceRepoURL&apos;, GITLAB_SERVER+&apos;/&apos;+GITLAB_PROJECT+&apos;.git&apos;, null)
  		stringParam(&apos;gitlabSourceRepoName&apos;, &apos;origin&apos;, null)
  		stringParam(&apos;gitlabSourceBranch&apos;, GIT_BRANCH, null)
  		stringParam(&apos;gitlabTargetBranch&apos;, GIT_BRANCH, null)
    }
    wrappers {
        deliveryPipelineVersion(GITLAB_PROJECT+&apos;:0.${BUILD_NUMBER}-SNAPSHOT&apos;, true)
    }
  
	scm {
		git {
				// Specify the branches to examine for changes and to build.
			branch(&apos;${gitlabSourceRepoName}/${gitlabSourceBranch}&apos;)
				// Adds a repository browser for browsing the details of changes in an external system.
			browser {
				gitLab(GITLAB_SERVER+&apos;/&apos;+GITLAB_PROJECT, &apos;8.2&apos;)
			} //browser
				// Adds a remote.
			remote {
					// Sets credentials for authentication with the remote repository.
				credentials(SERENITY_CREDENTIAL)
					// Sets a name for the remote.
				name(&apos;origin&apos;)
					// Sets the remote URL.
				url(GITLAB_SERVER+&apos;/&apos;+GITLAB_PROJECT+&apos;.git&apos;)
			} //remote
	    } //git
	} //scm

	triggers {
        gitlabPush {
            buildOnPushEvents(true)
            setBuildDescription(true)
            useCiFeatures(false)
            allowAllBranches(false)
            includeBranches(GIT_BRANCH)
        }
	} //triggers
  
    steps {
      shell(
&apos;#!/bin/bash\n&apos;+
&apos;#echo off\n&apos;+
&apos;export HOST_CHECKING=\&quot; -o StrictHostKeyChecking=no\&quot;\n&apos;+
&apos;export FILE_DOCKER_COMPOSE=\&quot;docker-compose.yml\&quot;\n&apos;+
&apos;export DOCKER_FILE=\&quot;DockerFile\&quot;\n&apos;+
&apos;export HOST_REGISTRY_BASE_IP=registry.lvtc.gsnet.corp\n&apos;+
&apos;export REGISTRY_BASE_LOGIN=registry.lvtc.gsnet.corp/\n&apos;+
&apos;#Need Parameters\n&apos;+
&apos;# JOB_NAME\n&apos;+
&apos;# JOB_INSTANCE\n&apos;+
&apos;# IMAGE MUST BE THE NAME OF GITLAB PROJECT\n&apos;+
&apos;IMAGE_NAME_BASE=\&quot;\$(grep -HR \&quot;image:\&quot; \$FILE_DOCKER_COMPOSE | cut -f3 -d\&apos;:\&apos;| head -n1)\&quot;;\n&apos;+
&apos;IMAGE_NAME_BASE=\&quot;\${IMAGE_NAME_BASE#\&quot;\${IMAGE_NAME_BASE%%[![:space:]]*}\&quot;}\&quot;;   # elimina los espacios por delante\n&apos;+
&apos;IMAGE_NAME_BASE=\&quot;\${IMAGE_NAME_BASE%\&quot;\${IMAGE_NAME_BASE##*[![:space:]]}\&quot;}\&quot;;  # elimina los espacios por detrás\n&apos;+
&apos;if [ \&quot;\$IMAGE_NAME_BASE\&quot; == \&quot;\&quot; ]; then\n&apos;+
&apos;        echo \&quot;[ERROR] Name Docker Image doesn´t exist\&quot;\n&apos;+
&apos;        exit 1;\n&apos;+
&apos;fi;\n&apos;+
&apos;echo \&quot;BASE IMAGE NAME:\&quot;\$IMAGE_NAME_BASE\n&apos;+
&apos;IMAGE_VERSION=\&quot;\$(grep -HR \&quot;image:\&quot; \$FILE_DOCKER_COMPOSE | cut -f4 -d\&apos;:\&apos;| head -n1)\&quot;;\n&apos;+
&apos;IMAGE_VERSION=\&quot;\${IMAGE_VERSION#\&quot;\${IMAGE_VERSION%%[![:space:]]*}\&quot;}\&quot;;   # elimina los espacios por delante\n&apos;+
&apos;IMAGE_VERSION=\&quot;\${IMAGE_VERSION%\&quot;\${IMAGE_VERSION##*[![:space:]]}\&quot;}\&quot;;  # elimina los espacios por detrán\n&apos;+
&apos;if [ \&quot;\$IMAGE_VERSION\&quot; == \&quot;\&quot; ]; then\n&apos;+
&apos;        IMAGE_VERSION=\&quot;latest\&quot;;\n&apos;+
&apos;fi;\n&apos;+
&apos;echo \&quot;version_imagen:\&quot;\$IMAGE_VERSION\n&apos;+
&apos;WPRESS_DATA_HOME=/tmp/data\n&apos;+
&apos;# moviendo ficheros del workspace al temporal\n&apos;+
&apos;if [ -a \&quot;\$DOCKER_FILE\&quot; ] # Review if void\n&apos;+
&apos;        then\n&apos;+
&apos;                echo \&quot;Docker file alerady exist\&quot;;\n&apos;+
&apos;                export WORDPRESS_DOCKERFILE=\&quot;\$(cat \$DOCKER_FILE)\&quot;\n&apos;+
&apos;        else\n&apos;+
&apos;                export WORDPRESS_DOCKERFILE=\&quot;FROM \$IMAGE_NAME_BASE:\$IMAGE_VERSION \\\n&apos;+
&apos;                \\n MAINTAINER serenity-alm@serenity.com \\\n&apos;+
&apos;                \\n ENV WPRESS_DATA_HOME  \$WPRESS_DATA_HOME \\\n&apos;+
&apos;                \\n\\nRUN mkdir \$WPRESS_DATA_HOME \\\n&apos;+
&apos;                \\n ADD ./wp-content \$WPRESS_DATA_HOME \\\n&apos;+
&apos;                \\n RUN if ls \$WPRESS_DATA_HOME/plugins; then cp -rd \$WPRESS_DATA_HOME/plugins/* /usr/src/wordpress/wp-content/plugins/; fi \\\n&apos;+
&apos;                \\n RUN if ls \$WPRESS_DATA_HOME/themes; then cp -rd \$WPRESS_DATA_HOME/themes/* /usr/src/wordpress/wp-content/themes/; fi \\\n&apos;+
&apos;                \\n RUN mkdir -p /usr/src/wordpress/wp-content/uploads \\\n&apos;+
&apos;                \\n RUN if ls \$WPRESS_DATA_HOME/uploads; then cp -rd \$WPRESS_DATA_HOME/uploads/* /usr/src/wordpress/wp-content/uploads; fi \\\n&apos;+
&apos;                \\n RUN chown -R www-data:www-data /usr/src/wordpress \\\n&apos;+
&apos;                \\n LABEL com.serenity.imageowner=\\\&quot;Serenity-ALM\\\&quot; \\\n&apos;+
&apos;                \\n LABEL com.serenity.description=\\\&quot;Docker file generated by Serenity ALM - Wordpress base\\\&quot; \\\n&apos;+
&apos;                \\n LABEL com.serenity.image.version=\\\&quot;0.\$BUILD_TAG-SNAPSHOT\\\&quot; \\\n&apos;+
&apos;                \\n ENV com.serenity.imageowner=\\\&quot;Serenity-ALM\\\&quot; \\\n&apos;+
&apos;                \\n ENV com.serenity.description=\\\&quot;Docker file generated by Serenity ALM - Wordpress base\\\&quot; \\\n&apos;+
&apos;                \\n ENV com.serenity.image.version=\\\&quot;0.\$BUILD_TAG-SNAPSHOT\\\&quot; \&quot;\n&apos;+
&apos;fi\n&apos;+
&apos;echo \&quot;DOCKER_FILE:\&quot;\$WORDPRESS_DOCKERFILE\n&apos;+
&apos;echo -e \$WORDPRESS_DOCKERFILE &gt; Dockerfile\n&apos;+
&apos;export REPOSITORY=&apos;+GITLAB_PROJECT+&apos;\n&apos;+
&apos;export DOCKER_HOST=\&quot;unix:///var/run/docker.sock\&quot;\n&apos;+
&apos;echo \&quot;REPOSITORY=\&quot;\$REPOSITORY &gt; env.properties\n&apos;+
&apos;echo \&quot;DOCKER_HOST=\&quot;\$DOCKER_HOST &gt;&gt; env.properties\n&apos;+
&apos;echo \&quot;REPOSITORY:\&quot;\$REPOSITORY\n&apos;+
&apos;echo \&quot;DOCKER_HOST:\&quot;\$DOCKER_HOST\n&apos;+
&apos;echo \&quot;\$(docker ps)\&quot;\n&apos;+
&apos;echo \&quot;\$(id)\&quot; &apos;
			)
			
		environmentVariables {
            propertiesFile(&apos;env.properties&apos;)
        }	
		
	 
      dockerBuildAndPublish {
			dockerRegistryURL(&quot;https://registry.lvtc.gsnet.corp&quot;)
            repositoryName(GITLAB_PROJECT)
            tag(&apos;0.$BUILD_NUMBER-SNAPSHOT&apos;)
            registryCredentials(SERENITY_CREDENTIAL)
            forcePull(false)
            createFingerprints(false)
            skipDecorate()
        }
      
    }// steps
	 publishers {
         git {
            pushOnlyIfSuccess()
            tag(&apos;origin&apos;, &apos;0.$BUILD_NUMBER-SNAPSHOT&apos;) {
                message(&apos;DOCKER IMAGE TAG&apos;)
                create()
            }
        }
        downstreamParameterized {
            trigger(JOB_NAME+&apos;-dev-deploy&apos;) {
                condition(&apos;SUCCESS&apos;)
                parameters {
                  predefinedProp(&apos;OSE3_PROJECT_NAME&apos;, OSE3_PROJECT_NAME)
                  predefinedProp(&apos;OSE3_CREDENTIAL&apos;, SERENITY_CREDENTIAL)
                }
            }
        }
    } //publishers

} //job

job (JOB_NAME+&apos;-dev-deploy&apos;) {
    println &quot;JOB: &quot;+JOB_NAME+&apos;-dev-deploy&apos;
    deliveryPipelineConfiguration(&apos;Dev&apos;, &apos;Deploy image&apos;)
    label(&apos;ose3-deploy&apos;)
    parameters {
      stringParam(&apos;OSE3_PROJECT_NAME&apos;, &apos;&apos;, &apos;&apos;)
      credentialsParam(&apos;OSE3_CREDENTIAL&apos;) {
            type(&apos;com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl&apos;)
            required()
            description(&apos;Username/password for deploying images into Openshift3&apos;)
            defaultValue(SERENITY_CREDENTIAL)
        }
      stringParam(&apos;PIPELINE_VERSION&apos;,&apos;&apos;,&apos;&apos;)
    }
    wrappers {
      credentialsBinding {
        usernamePassword(&apos;OSE3_USERNAME&apos;, &apos;OSE3_PASSWORD&apos;, &apos;${OSE3_CREDENTIAL}&apos;)
      }
    }
    properties {
        sidebarLinks {
            // use uploaded image
            link('http://'+PROJECT_NAME+'-'+OSE3_PROJECT_NAME+'.appls.boae.paas.gsnetcloud.corp', 'Openshift', '/userContent/openshift_64x64.png')
        }
    }
    steps {
        shell(&apos;deploy_in_ose3.sh ${OSE3_USERNAME} ${OSE3_PASSWORD} ${OSE3_PROJECT_NAME} &apos;+
              PROJECT_NAME+&apos; wordpress-btsync-external-mysql --param=APP_NAME=\&apos;&apos;+PROJECT_NAME+
              &apos;\&apos;,WORDPRESS_IMAGE=registry.lvtc.gsnet.corp/${PIPELINE_VERSION}&apos;+
              &apos;,MYSQL_DB_HOST=external-mysql,MYSQL_DB_PORT=3306,MYSQL_DB_USER=admin,MYSQL_DB_PASSWORD=aquielpassword,MYSQL_DB_NAME=wordpress&apos;)
    }
}

deliveryPipelineView(JOB_NAME) {
    allowPipelineStart()
	allowRebuild()
    columns(3)
    //enableManualTriggers()
    pipelineInstances(3)
    showAggregatedPipeline()
    showAvatars()
    showChangeLog()
	showDescription()
	showPromotions()
	showTotalBuildTime()
    updateInterval(10)   
    pipelines {
        component(GITLAB_PROJECT, JOB_NAME+&apos;-build&apos;)
    }
} // deliveryPipelineView

def url = new URL(GITLAB_SERVER+&quot;/api/v3/projects/&quot;+java.net.URLEncoder.encode(GITLAB_PROJECT)+&quot;/hooks?&quot;+
                  &quot;private_token=&quot;+GITLAB_API_TOKEN+&quot;&amp;url=&quot;+inst.getRootUrl()+&quot;project/&quot;+JOB_NAME+&apos;-build&apos;+
                  &quot;&amp;merge_requests_events=true&amp;push_events=true&quot;)
println &quot;Create hook: &quot;+url

def connection = url.openConnection()
connection.setRequestMethod(&quot;POST&quot;)
connection.doOutput = true
connection.connect()
	
println connection.content.text
assert connection.responseCode == 201</scriptText>
      <usingScriptText>true</usingScriptText>
      <ignoreExisting>false</ignoreExisting>
      <removedJobAction>IGNORE</removedJobAction>
      <removedViewAction>IGNORE</removedViewAction>
      <lookupStrategy>JENKINS_ROOT</lookupStrategy>
      <additionalClasspath></additionalClasspath>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>
